% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sora_request.R
\name{sora_request}
\alias{sora_request}
\alias{sora_simulate}
\title{Commission a linking job}
\usage{
sora_request(
  dataset,
  link_to,
  method,
  ...,
  provenance = sora_provenance(),
  wait = FALSE,
  provider = "IOER",
  verbose = NULL,
  api_key = NULL
)

sora_simulate(
  dataset,
  link_to,
  method,
  ...,
  provenance = sora_provenance(),
  provider = "IOER",
  api_key = NULL
)
}
\arguments{
\item{dataset}{An object of class \code{\link{sora_custom}},
\code{\link{sora_provided}}, or \code{\link{sora_admin}}. Each object
type assumes a different type of data input:

\itemize{
\item{\code{sora_custom} is used to provide your own point data.}
\item{\code{sora_provided} is used to link to a dataset provided by the
SoRa service. These are either sensitive microdata or structural datasets
that mirror the distribution of microdata.}
\item{\code{sora_admin} is used to provide identifiers from regional
administrative datasets, e.g. zip codes or municipalities.}
}}

\item{link_to}{An object of class \code{\link{sora_spatial}} or a character
string containing a valid dataset ID in \code{\link{sora_spatial}}. This
argument is used to specify the spatial dataset to link your \code{dataset}
to. It can either be a spatial dataset provided by SoRa or a dataset provided
by you.}

\item{method}{An object of class \code{\link{sora_linking}} or a character
string containing a valid linking method in \code{\link{sora_linking}}.
This argument specifies how to link the data provided in \code{dataset}
and \code{link_to}.}

\item{...}{If \code{method} is a character string, you can use \code{...}
to provide further arguments to \code{\link{sora_linking}}.}

\item{provenance}{An object of class \code{\link{sora_provenance}} or
a logical value that specifies if and how to generate a provenance record.
If a user-provided dataset is passed, additional information are needed to
create such a record. By default, no provenance record is produced.}

\item{wait}{Whether to wait for the results using \code{\link{sora_wait}}.
If \code{TRUE}, runs \code{\link{sora_job_done}} repeatedly until the
linking is finished and then fetches the results using
\code{\link{sora_results}}. You can interrupt this process at any time and
continue manually. If \code{FALSE}, immediately returns the job ID after
the request has been commissioned. Defaults to \code{FALSE}. In interactive
sessions, a spinner is shown which can be disabled using
\code{options(sora_spinner = FALSE)}.}

\item{provider}{ID of a linking service provider to perform the
spatial linking. Defaults to \code{"IOER"}.}

\item{verbose}{A logical, character string or \code{NULL} that specifies if
and how to produce messages. If \code{FALSE}, suppresses all informative
messages. If a path is provided, stores all messages in the specified file.
If \code{NULL}, verbosity depends on \code{getOption("sora_verbose")}. Use
the latter to set verbosity across the entire session, e.g. to suppress
messages from all package functions. Defaults to \code{NULL} and
\code{getOption("sora_verbose")} defaults to \code{TRUE}, i.e., display
messages where reasonable.}

\item{api_key}{A valid SoRa API key. Required to communicate with the SoRa
API. You can request a key by filling out
\href{https://sora.gesis.org/unofficial/sora-user-mod/users/request-api-key}{this form}
on the SoRa website.

If \code{NULL}, reads a key from the \code{SORA_API_KEY}
environment variable.

If "ask" (and the session is interactive), opens a masked prompt where you
can enter your key. The entered key is persistently stored in an environment
variable and can be used across sessions.

Please note that you are advised not to enter your key directly using this
argument. If you do, please make sure that you do not publish any code files
containing the key in plain text. Failure to do so can compromise your
access to the SoRa API.}
}
\value{
If \code{wait = FALSE}, a job ID of the job that has been created by
commissioning the request. You can use this ID to poll the status of the
linking and fetch its results (see \code{\link{sora_results}}). If
\code{wait = TRUE}, automates this workflow and returns a dataframe
containing the results of the linking job.
}
\description{
Send request to the SoRa API. After the request has been
made, a linking job is created in the SoRa API. After it is finished,
you can retrieve the requests using \code{\link{sora_results}}.

To see if your linking job is successful without actually commissioning
a request you can use \code{sora_simulate}.
}
\examples{
\dontshow{if (isTRUE(Sys.getenv("SORA_RUN_EXAMPLES")) && sora_available()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
sora_data <- sora_custom(ber_income, crs = 3035)
spat_data <- sora_spatial("ioer-monitor-s02rg-2023-1000m")
linking <- sora_linking(
  method = "aggregate_attribute",
  selection_area = "square",
  length = 2500,
  output = c("mean", "median", "sd")
)

# Check if request can be commissioned
sora_simulate(sora_data, link_to = spat_data, method = linking)

# Then commission the request
jid <- sora_request(sora_data, link_to = spat_data, method = linking)

# A commissioned request can take some time to finish. After finishing
# you can fetch the results.
sora_wait(jid)

# Alternatively, for simpler queries, you can directly insert the raw
# string values instead of constructing objects first.
sora_simulate(
  sora_data,
  link_to = "ioer-monitor-s02rg-2023-1000m",
  method = "aggregate_attribute",
  selection_area = "circle",
  radius = 1000,
  output = "median"
)
\dontshow{\}) # examplesIf}
}
\seealso{
\code{\link{sora_results}}, \code{\link{sora_job_status}},
\code{\link{sora_job_done}}
}
